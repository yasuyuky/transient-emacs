{
  "name": "transient-emacs",
  "displayName": "Transient Emacs",
  "publisher": "yasuyuky",
  "main": "./lib/entrypoint",
  "version": "0.19.0",
  "categories": [
    "Keymaps"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "commands": [
      {
        "command": "transient.setMark",
        "title": "Transient: Set Mark"
      },
      {
        "command": "transient.yank",
        "title": "Transient: Yank"
      },
      {
        "command": "transient.kill",
        "title": "Transient: Kill"
      },
      {
        "command": "transient.killRegion",
        "title": "Transient: Kill Region"
      },
      {
        "command": "transient.copyRegion",
        "title": "Transient: Copy Region"
      },
      {
        "command": "transient.killRegionOrBackwardWord",
        "title": "Transient: Kill Region Or Backward Word"
      },
      {
        "command": "transient.showKillRing",
        "title": "Transient: Show KillRing"
      },
      {
        "command": "transient.cancel",
        "title": "Transient: Cancel"
      },
      {
        "command": "transient.shellCommand",
        "title": "Transient: Shell Command"
      },
      {
        "command": "transient.shellCommandOnRegion",
        "title": "Transient: Shell Command On Region"
      },
      {
        "command": "transient.shellCommandAndInsert",
        "title": "Transient: Shell Command and Insert"
      },
      {
        "command": "transient.shellCommandOnRegionAndReplace",
        "title": "Transient: Shell Command On Region and Replace"
      }
    ],
    "keybindings": [
      {
        "key": "ctrl+enter",
        "command": "transient.setMark",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+2",
        "command": "transient.setMark",
        "when": "textInputFocus"
      },
      {
        "key": "left",
        "command": "transient.cursorLeft",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+b",
        "command": "transient.cursorLeft",
        "when": "textInputFocus"
      },
      {
        "key": "right",
        "command": "transient.cursorRight",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+f",
        "command": "transient.cursorRight",
        "when": "textInputFocus"
      },
      {
        "key": "up",
        "command": "transient.cursorUp",
        "when": "textInputFocus && !suggestWidgetVisible"
      },
      {
        "key": "ctrl+p",
        "command": "transient.cursorUp",
        "when": "textInputFocus && !suggestWidgetVisible"
      },
      {
        "key": "down",
        "command": "transient.cursorDown",
        "when": "textInputFocus && !suggestWidgetVisible"
      },
      {
        "key": "ctrl+n",
        "command": "transient.cursorDown",
        "when": "textInputFocus && !suggestWidgetVisible"
      },
      {
        "key": "home",
        "command": "transient.cursorHome",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+a",
        "command": "transient.cursorHome",
        "when": "textInputFocus"
      },
      {
        "key": "end",
        "command": "transient.cursorEnd",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+e",
        "command": "transient.cursorEnd",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+right",
        "command": "transient.cursorWordRight",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+left",
        "command": "transient.cursorWordLeft",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+right",
        "command": "cursorWordRightSelect",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+left",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+up",
        "command": "transient.cursorParagraphUp",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+down",
        "command": "transient.cursorParagraphDown",
        "when": "textInputFocus"
      },
      {
        "key": "shift+alt+,",
        "command": "transient.cursorTop",
        "when": "textInputFocus"
      },
      {
        "key": "shift+alt+.",
        "command": "transient.cursorBottom",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+v",
        "command": "transient.cursorPageDown",
        "when": "textInputFocus"
      },
      {
        "key": "alt+v",
        "command": "transient.cursorPageUp",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+l",
        "command": "transient.adjustToCenter",
        "when": "textInputFocus"
      },
      {
        "key": "alt+g g",
        "command": "workbench.action.gotoLine"
      },
      {
        "key": "alt+g n",
        "command": "editor.action.marker.next",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "alt+g p",
        "command": "editor.action.marker.prev",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+x ctrl+s",
        "command": "workbench.action.files.save"
      },
      {
        "key": "ctrl+x ctrl+r",
        "command": "workbench.action.files.saveWithoutFormatting"
      },
      {
        "key": "ctrl+x ctrl+w",
        "command": "workbench.action.files.saveAs"
      },
      {
        "key": "ctrl+x k",
        "command": "workbench.action.closeActiveEditor"
      },
      {
        "key": "ctrl+x ctrl+f",
        "command": "workbench.action.files.openFile"
      },
      {
        "key": "ctrl+x ctrl+b",
        "command": "workbench.action.quickOpen"
      },
      {
        "key": "ctrl+x b",
        "command": "workbench.action.openNextRecentlyUsedEditorInGroup"
      },
      {
        "key": "ctrl+x ctrl+c",
        "command": "workbench.action.quit"
      },
      {
        "key": "ctrl+s",
        "command": "actions.find",
        "when": "!findWidgetVisible"
      },
      {
        "key": "ctrl+s",
        "command": "editor.action.nextMatchFindAction",
        "when": "findWidgetVisible"
      },
      {
        "key": "ctrl+r",
        "command": "actions.find",
        "when": "!findWidgetVisible"
      },
      {
        "key": "ctrl+r",
        "command": "editor.action.previousMatchFindAction",
        "when": "findWidgetVisible"
      },
      {
        "key": "enter",
        "command": "closeFindWidget",
        "when": "findWidgetVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeFindWidget",
        "when": "findWidgetVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeReviewPanel",
        "when": "reviewPanelVisible"
      },
      {
        "key": "ctrl+g",
        "command": "search.action.cancel",
        "when": "searchViewletVisible"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+g",
        "command": "transient.cancel",
        "when": "!findWidgetVisible && !inQuickOpen && !reviewPanelVisible"
      },
      {
        "key": "ctrl+x u",
        "command": "undo"
      },
      {
        "key": "ctrl+w",
        "command": "transient.killRegionOrBackwardWord",
        "when": "textInputFocus"
      },
      {
        "key": "alt+w",
        "command": "transient.copyRegion",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+k",
        "command": "transient.kill",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+y",
        "command": "transient.yank",
        "when": "textInputFocus"
      },
      {
        "key": "alt+y",
        "command": "transient.showKillRing",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+j",
        "command": "transient.insertNewline",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+down",
        "command": "editor.action.insertCursorBelow",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+up",
        "command": "editor.action.insertCursorAbove",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+x 2",
        "command": "workbench.action.splitEditorDown"
      },
      {
        "key": "ctrl+x 3",
        "command": "workbench.action.splitEditorRight"
      },
      {
        "key": "ctrl+x 0",
        "command": "workbench.action.closeEditorsInGroup"
      },
      {
        "key": "ctrl+x o",
        "command": "workbench.action.focusNextGroup"
      },
      {
        "key": "alt+x",
        "command": "workbench.action.showCommands"
      },
      {
        "key": "alt+.",
        "command": "workbench.action.gotoSymbol"
      },
      {
        "key": "shift+alt+1",
        "command": "transient.shellCommand",
        "when": "textInputFocus"
      },
      {
        "key": "shift+alt+\\",
        "command": "transient.shellCommandOnRegion",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+u shift+alt+1",
        "command": "transient.shellCommandAndInsert",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+u shift+alt+\\",
        "command": "transient.shellCommandOnRegionAndReplace",
        "when": "textInputFocus"
      }
    ],
    "configuration": [
      {
        "title": "Transient Emacs",
        "properties": {
          "transientEmacs.codeWordRange": {
            "type": "boolean",
            "default": false,
            "description": "Use the word range provided by vscode (if available)"
          },
          "transientEmacs.wordRegex": {
            "type": "string",
            "default": "[\\w\\d]+",
            "description": "Word regex"
          },
          "transientEmacs.delimRegex": {
            "type": "string",
            "default": "[^\\w\\d]+",
            "description": "Delimiter regex"
          },
          "transientEmacs.syncClipboard": {
            "type": "boolean",
            "default": true,
            "description": "Sync clipboard"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm install && npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "npm run compile && node ./lib/code/test/run.js"
  },
  "devDependencies": {
    "@types/clipboardy": "^2.0.1",
    "@types/glob": "^7.1.4",
    "@types/mocha": "^9.0.0",
    "@types/node": "^16.10.2",
    "@types/vscode": "^1.60.0",
    "@typescript-eslint/eslint-plugin": "^4.32.0",
    "@typescript-eslint/parser": "^4.32.0",
    "eslint": "^7.32.0",
    "mocha": "^9.1.2",
    "typescript": "^4.4.3",
    "vscode-test": "^1.6.1"
  },
  "private": true,
  "description": "Emacs mode using transient mark",
  "repository": {
    "type": "git",
    "url": "https://github.com/yasuyuky/transient-emacs"
  },
  "icon": "image/icon.png",
  "license": "MIT",
  "engines": {
    "vscode": "^1.56.0",
    "atom": "^1.39.0"
  },
  "dependencies": {
    "atom-select-list": "^0.8.1",
    "clipboardy": "^2.3.0"
  },
  "deserializers": {
    "KillRing": "deserializeKillRing"
  }
}
